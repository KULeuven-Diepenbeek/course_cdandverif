<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5 Coverage on Chip Design and Verification</title>
    <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/</link>
    <description>Recent content in 5 Coverage on Chip Design and Verification</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <managingEditor>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</managingEditor>
    <webMaster>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</webMaster>
    
	<atom:link href="https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>501 Coverage</title>
      <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/501_coverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/501_coverage/</guid>
      <description>Coverage By now, hopefully, you are starting to see the potential of SystemVerilog. Up until this point a lot of concepts were introduced and code has already been written, but take a look at the amount of tests that were done. In the final assignment a total of 2&amp;rsquo;000 different testvectors were applied to the DUT.
A question that now might arise is: How much verification is enough ?</description>
    </item>
    
    <item>
      <title>502 Functional coverage</title>
      <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/502_funccoverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/502_funccoverage/</guid>
      <description>Functional coverage SystemVerilog has two types of functional coverage. One type is data-oriented and falls within Covergroups. The other type is control-oriented and falls within Assertions. This chapter handles covergroups and the next chapter handles Assertions.
Covergroups Covergroups can exists out of multiple coverpoints. A coverpoint is a specification of an expression. That doesn&amp;rsquo;t sound very clear, so let&amp;rsquo;s try to illustrate this with an example.
In our earlier example the operation property is a bit vector with a width of 5.</description>
    </item>
    
    <item>
      <title>503 Cross coverage</title>
      <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/503_crosscoverage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/503_crosscoverage/</guid>
      <description>Cross coverage In the next example (cg2) the covergroup has two coverpoints: cp_ALU_instruction_type and cp_ALU_instruction_type. The former looks at the type of instruction while the latter focusses on the three least significant bits, which indicated the second operand. Also note that, other than putting 2 coverpoints on a single signal, putting coverpoints is also possible. Additionally the number of times each bin needs to be hit to achieve a 100% goal is also increased to 100.</description>
    </item>
    
    <item>
      <title>504 More on bins</title>
      <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/504_morebins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/504_morebins/</guid>
      <description>More on bins The configuration of the bins has a huge influence on the coverage. This makes constraining the bins a delicate job. SystemVerilog therefore offers quite some flexibility to define the bins. Below, a couple of features/techniques are highlighted.
Explicit bins bins a = {1, 2};  
Bin a is hit when the value is 1 or 2.


bins b[3] = {1, 2, 3, 4, 5, 6, 7, 8, 9};</description>
    </item>
    
    <item>
      <title>505 Assignment 4</title>
      <link>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/505_assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>&lt;i&gt;fname&lt;/i&gt;.&lt;i&gt;lname&lt;/i&gt;A T&lt;i&gt;kuleuven.be&lt;/i&gt; (Nele Mentens and Jo Vliegen)</author>
      <guid>https://kuleuven-diepenbeek.github.io/course_cdandverif/500_coverage/505_assignment/</guid>
      <description>Assignment 4 This assignment works in an cumulative way. Try to obtain 100% coverage and, upon reaching 100%, stop the simulation. For this exercise it is decided that 100% coverage is reached when:
 at least 100 XORs are executed after immediately after a SBC at least 1000 CPs are executed at least 20 SUB instructions should be done with register E the amount of arithmetic operations should roughly be 3 times the amount of logical operations at least 327 logical instructions are done without register A  To have your simulation halt after achieving 100% coverage, and no longer on a certain number of operations, there is a built-in function $get_coverage( ).</description>
    </item>
    
  </channel>
</rss>